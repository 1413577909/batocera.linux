#!/usr/bin/python

import xml.etree.ElementTree as ET
import os
import requests
import time

class BatoceraTest():

    @staticmethod
    def run():
        emulators = BatoceraTest.findEmulators()
        games     = BatoceraTest.findGamesForEmulators(emulators)

        for system in games:
            if system in ["snes", "nes", "megadrive"]:
                BatoceraTest.runTest(system, games[system])

    @staticmethod
    def runTest(system, game):
        print("testing system {} with {}".format(system, os.path.basename(game)))

        # start the game
        # curl http://localhost:1234/launch -d "/userdata/roms/gamecube/Super Mario Sunshine.iso"
        x = requests.post("http://localhost:1234/launch", data = game)
        if not x.ok:
            raise Exception("fail call es")

        # wait 20s
        time.sleep(20)

        # stop the game
        code = os.system("batocera-es-swissknife --emukill")

        # batocera-screenshot

    @staticmethod
    def findEmulators():
        emulators = {}
        if os.path.exists("/userdata/system/configuration/emulationstation/es_systems.cfg"):
            tree = ET.parse("/userdata/system/configuration/emulationstation/es_systems.cfg")
        elif os.path.exists("/usr/share/emulationstation/es_systems.cfg"):
            tree = ET.parse("/usr/share/emulationstation/es_systems.cfg")
        else:
            raise Exception("es_system.cfg not found");
        systemList = tree.getroot()

        if systemList.tag != "systemList":
            raise Exception("root tag is not systemList");
        for system in systemList:
            if system.tag == "system":
                infos = {}
                for systemInfo in system:
                    if systemInfo.tag in ["name", "path", "extension"]:
                        infos[systemInfo.tag] = systemInfo.text
                if "name" in infos and "path" in infos and "extension" in infos:
                    emulators[infos["name"]] = {"path": infos["path"], "extensions": infos["extension"].split(" ")}
        return emulators

    @staticmethod
    def findGamesForEmulators(emulators):
        games = {}
        for emulator in emulators:
            game = BatoceraTest.findGamesForEmulator(emulator, emulators[emulator])
            if game is not None:
                games[emulator] = game
        return games

    @staticmethod
    def findGamesForEmulator(emulator, infos):
        for root, dirs, files in os.walk(infos["path"]):
            for file in files:
                for extension in infos["extensions"]:
                    if file.endswith(extension):
                        return os.path.join(root, file)
        return None

if __name__ == '__main__':
   BatoceraTest.run()
